/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id 'maven-publish'
}

publishing {
    publications {
        // 这里的 myhello 可以任意命名,只会影响task的名字（也就是影响publish类型的task的名字）
        myhello(MavenPublication) {
            groupId = 'com.myexample.plugin'//classpath中使用
            artifactId = 'hello'//classpath中使用
            version = '0.0.2'//classpath中使用
            // 组件类型
            from components.java
        }
    }
    repositories {
        //发布到的maven地址
        maven {
            // $rootProject 表示项目的根目录
            url = "$rootDir/repo"
        }
    }
}

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'myplugin.greeting'//这个id就是apply时使用的id
            implementationClass = 'myplugin.MypluginPlugin' //指定实现的class
        }
        helloworld {
            id = 'myplugin.helloworld'//这个id就是apply时使用的id
            implementationClass = 'myplugin.MypluginPlugin2' //指定实现的class
        }
    }
}
repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Use JUnit test framework for unit tests
    testImplementation 'junit:junit:4.12'
}


// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}
